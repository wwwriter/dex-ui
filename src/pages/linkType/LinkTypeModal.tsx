import { useState, useEffect } from "react";
import { useQueryClient, useQuery } from "@tanstack/react-query";
import { LinkType, ObjectType } from "../../types";
import { linkTypeApi, objectTypeApi } from "../../api/dexApi";

interface LinkTypeModalProps {
  isOpen: boolean;
  onClose: () => void;
  linkType: LinkType | null;
  ontology_id: number;
  object_type_id: number;
}

const LinkTypeModal = ({
  isOpen,
  onClose,
  linkType,
  ontology_id,
  object_type_id,
}: LinkTypeModalProps) => {
  const queryClient = useQueryClient();
  const [formData, setFormData] = useState<Partial<LinkType>>({
    name: "",
    label: "",
    description: "",
    relationship_type: "foreign-key",
    source_object_link_property: "",
    target_object_link_property: "",
    ontology_id,
    source_object_type_id: object_type_id,
    target_object_type_id: null,
  });

  const { data: objectTypes = [] } = useQuery({
    queryKey: ["objectTypes", ontology_id],
    queryFn: () => objectTypeApi.getAll(ontology_id),
  });

  const { data: existingLinkTypes = [] } = useQuery({
    queryKey: ["linkTypes", ontology_id, object_type_id],
    queryFn: () =>
      linkTypeApi.getAll(ontology_id, {
        filters: { source_object_type_id: object_type_id },
      }),
  });

  // 소스 객체 타입과 이미 연결된 타겟 객체 타입을 제외한 목록
  const targetObjectTypes = objectTypes.filter(
    (obj) =>
      obj.id !== object_type_id &&
      !existingLinkTypes.some((link) => link.target_object_type_id === obj.id)
  );

  // 소스 객체 타입 정보
  const sourceObjectType = objectTypes.find((obj) => obj.id === object_type_id);

  // 타겟 객체 타입 변경 핸들러
  const handleTargetObjectTypeChange = (targetId: number | null) => {
    const targetObjectType = objectTypes.find((obj) => obj.id === targetId);

    // 이름 자동 생성 (소스-타겟 형식)
    const autoGeneratedName =
      targetObjectType && sourceObjectType
        ? `${sourceObjectType.name}-${targetObjectType.name}`
        : "";

    setFormData({
      ...formData,
      target_object_type_id: targetId,
      name: autoGeneratedName,
    });
  };

  useEffect(() => {
    if (linkType) {
      setFormData({
        name: linkType.name,
        label: linkType.label,
        description: linkType.description,
        relationship_type: linkType.relationship_type,
        source_object_link_property: linkType.source_object_link_property || "",
        target_object_link_property: linkType.target_object_link_property || "",
        ontology_id,
        source_object_type_id: object_type_id,
        target_object_type_id: linkType.target_object_type_id,
      });
    } else {
      setFormData({
        name: "",
        label: "",
        description: "",
        relationship_type: "foreign-key",
        source_object_link_property: "",
        target_object_link_property: "",
        ontology_id,
        source_object_type_id: object_type_id,
        target_object_type_id: null,
      });
    }
  }, [linkType, ontology_id, object_type_id]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      if (linkType) {
        await linkTypeApi.update(linkType.id, {
          ...formData,
          ontology_id,
          source_object_type_id: object_type_id,
        });
      } else {
        await linkTypeApi.create({
          name: formData.name || "",
          label: formData.label || null,
          description: formData.description || null,
          relationship_type: formData.relationship_type || "foreign-key",
          source_object_link_property:
            formData.source_object_link_property || null,
          target_object_link_property:
            formData.target_object_link_property || null,
          ontology_id,
          source_object_type_id: object_type_id,
          target_object_type_id: formData.target_object_type_id || null,
        });
      }
      queryClient.invalidateQueries({
        queryKey: ["linkTypes", ontology_id, object_type_id],
      });
      setFormData({
        name: "",
        label: "",
        description: "",
        relationship_type: "foreign-key",
        source_object_link_property: "",
        target_object_link_property: "",
        ontology_id,
        source_object_type_id: object_type_id,
        target_object_type_id: null,
      });
      onClose();
    } catch (error) {
      console.error("링크 타입 저장 중 오류 발생:", error);
      alert("링크 타입 저장 중 오류가 발생했습니다.");
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-md">
        <h2 className="text-xl font-semibold mb-4">
          {linkType ? "링크 타입 수정" : "새 링크 타입 추가"}
        </h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              타겟 객체 타입 *
            </label>
            <select
              value={formData.target_object_type_id || ""}
              onChange={(e) =>
                handleTargetObjectTypeChange(
                  e.target.value ? Number(e.target.value) : null
                )
              }
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md"
            >
              <option value="">선택해주세요</option>
              {targetObjectTypes.map((obj) => (
                <option key={obj.id} value={obj.id}>
                  {obj.name}
                </option>
              ))}
            </select>
          </div>

          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              이름 *
            </label>
            <input
              type="text"
              value={formData.name || ""}
              onChange={(e) =>
                setFormData({ ...formData, name: e.target.value })
              }
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md"
            />
          </div>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              설명
            </label>
            <textarea
              value={formData.description || ""}
              onChange={(e) =>
                setFormData({ ...formData, description: e.target.value })
              }
              className="w-full px-3 py-2 border border-gray-300 rounded-md"
              rows={3}
            />
          </div>

          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              관계 타입 *
            </label>
            <select
              value={formData.relationship_type || "foreign-key"}
              onChange={(e) =>
                setFormData({
                  ...formData,
                  relationship_type: e.target.value as
                    | "foreign-key"
                    | "dataset",
                })
              }
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md"
            >
              <option value="foreign-key">외래 키</option>
              <option value="dataset">데이터셋</option>
            </select>
          </div>

          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              소스 객체 링크 속성
            </label>
            <input
              type="text"
              value={formData.source_object_link_property || ""}
              onChange={(e) =>
                setFormData({
                  ...formData,
                  source_object_link_property: e.target.value,
                })
              }
              className="w-full px-3 py-2 border border-gray-300 rounded-md"
            />
          </div>

          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              타겟 객체 링크 속성
            </label>
            <input
              type="text"
              value={formData.target_object_link_property || ""}
              onChange={(e) =>
                setFormData({
                  ...formData,
                  target_object_link_property: e.target.value,
                })
              }
              className="w-full px-3 py-2 border border-gray-300 rounded-md"
            />
          </div>

          <div className="flex justify-end space-x-3">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 border border-gray-300 rounded-md"
            >
              취소
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              {linkType ? "저장" : "추가"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default LinkTypeModal;
